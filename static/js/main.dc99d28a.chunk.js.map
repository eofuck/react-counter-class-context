{"version":3,"sources":["Counter.js","App.js","index.js"],"names":["Counter","props","state","count","initialCount","console","log","ThemeContext","Consumer","style","onClick","changeCount","amount","this","setState","prevState","Component","React","createContext","App","useState","theme","setTheme","Provider","value","backgroundColor","PrevTheme","ReactDOM","render","document","getElementById"],"mappings":"wLAKqBA,E,kDAGnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAOF,EAAMG,cAJE,E,0CAQnB,WAAU,IAAD,OAGP,OADAC,QAAQC,IAAI,kBAEV,cAACC,EAAaC,SAAd,UAEG,SAACC,GAAD,OACC,gCACE,wBAAQA,MAAOA,EAAOC,QAAS,kBAAM,EAAKC,aAAa,IAAvD,eAIA,+BAAO,EAAKT,MAAMC,QAClB,wBAAQM,MAAOA,EAAOC,QAAS,kBAAM,EAAKC,YAAY,IAAtD,uB,yBAUV,SAAYC,GAGVC,KAAKC,UAAS,SAACC,GACb,MAAO,CAAEZ,MAAOY,EAAUZ,MAAQS,U,GAtCHI,aCExBT,EAAeU,IAAMC,gBA8BnBC,MA5Bf,WAIEd,QAAQC,IAAI,cAEZ,MAA0Bc,mBAAS,OAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEA,OAGE,cAFA,CAECf,EAAagB,SAAd,CAAuBC,MAAO,CAAEC,gBAAiBJ,GAAjD,UAGE,cAAC,EAAD,CAASjB,aAAc,IACvB,wBACEM,QAAS,kBACPY,GAAS,SAACI,GACR,MAAqB,QAAdA,EAAsB,OAAS,UAH5C,8BCpBNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.dc99d28a.chunk.js","sourcesContent":["// React allows us to write JSX, Componenet allows us to create class\nimport React, { Component } from 'react';\nimport { ThemeContext } from './App';\n\n// all of the code inside this class becomes react component\nexport default class Counter extends Component {\n  //allows us to use state\n  //always takes props\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: props.initialCount,\n    };\n  }\n\n  render() {\n    //this gets consoled everytime this component rerenders\n    console.log('render counter');\n    return (\n      <ThemeContext.Consumer>\n        {/*backgroundColor: theme*/}\n        {(style) => (\n          <div>\n            <button style={style} onClick={() => this.changeCount(-1)}>\n              -\n            </button>\n            {/*acesses prop InitialCount passed down from App.js*/}\n            <span>{this.state.count}</span>\n            <button style={style} onClick={() => this.changeCount(+1)}>\n              +\n            </button>\n          </div>\n        )}\n      </ThemeContext.Consumer>\n    );\n  }\n\n  //it Acesses previous state\n  changeCount(amount) {\n    //this.setState({ count: this.state.count + amount });\n    //this setState is asynchronous\n    this.setState((prevState) => {\n      return { count: prevState.count + amount };\n    });\n  }\n  /*\n    \n  */\n}\n","import React, { useState } from 'react';\nimport Counter from './Counter';\n\n//Context has provider and consumer\n//Provider passes value and consumer consumes it\n//also when context get's changed it doesn't rerender app\n//yo need to use state for it\nexport const ThemeContext = React.createContext();\n\nfunction App() {\n  //it gets consoled only once when page loads and not everytime <Counter/> rerenders\n  //because when state changes it only renders component you are inside of\n  //and any child components that are rendered from that component\n  console.log('Render App');\n\n  const [theme, setTheme] = useState('red');\n\n  return (\n    //all of the code inside <ThemeContext.Provider/> can access it\n    //this attribute always needs to be caled value\n    <ThemeContext.Provider value={{ backgroundColor: theme }}>\n      {/* passed down initialCount as 0 down to <Counter/> as props,\n      you access it by using this.props.initialCount*/}\n      <Counter initialCount={1} />\n      <button\n        onClick={() =>\n          setTheme((PrevTheme) => {\n            return PrevTheme === 'red' ? 'blue' : 'red';\n          })\n        }\n      >\n        Toggle Theme\n      </button>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}